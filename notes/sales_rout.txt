const Log = require('../models/log').Log;
const Sales = require('../models/accounts/sales').Sales;
const accountsChart = require('../models/accounts/accountsChart').accountsChart;
const Transation = require('../models/accounts/transaction').Transaction;
module.exports = function(router) {
    router.get('/salesInvoice', (req, res) => {
        if (!req.user == false) {
            Log.create({
                statement: 'User: ' + req.user.userName + ' entered to add sales invoice '
            });
            res.render('salesInvoice')
        } else {
            res.redirect(302, '/login');
        }
    })
    router.post('/salesInvoice', (req, res) => {
        let data = {}
        var newSales = new Sales({
            _id: req.body._id,
            invoiceNumber: req.body.invoiceNumber,
            date: req.body.date,
            month: req.body.month,
            clientName: req.body.clientName,
            statement: req.body.statement,
            materialCode: req.body.materialCode,
            quantity: req.body.quantity,
            sellingPrice: req.body.sellingPrice,
            costPrice: req.body.costPrice
        })
        newSales.save(function() {
            Sales.aggregate([{
                $project: {
                    _id: "$_id",
                    invoiceNumber: "$invoiceNumber",
                    month: "$month",
                    clientName: "$clientName",
                    statement: "$statement",
                    materialCode: "$materialCode",
                    quantity: "$quantity",
                    sellingPrice: "$sellingPrice",
                    sales: { $multiply: ["$quantity", "$sellingPrice"] },
                    VAT: { $round: [{ $multiply: ["$quantity", "$sellingPrice", 0.14] }] },
                    totalInvoice: { $sum: [{ $multiply: ["$quantity", "$sellingPrice"] }, { $multiply: ["$quantity", "$sellingPrice", 0.14] }] },
                    discount: { $multiply: [{ $sum: [{ $multiply: ["$quantity", "$sellingPrice"] }, { $multiply: ["$quantity", "$sellingPrice", 0.14] }] }, 0.02] },
                    netInvoice: { $round: [{ $subtract: [{ $sum: [{ $multiply: ["$quantity", "$sellingPrice"] }, { $multiply: ["$quantity", "$sellingPrice", 0.14] }] }, { $multiply: [{ $sum: [{ $multiply: ["$quantity", "$sellingPrice"] }, { $multiply: ["$quantity", "$sellingPrice", 0.14] }] }, 0.02] }] }] }
                },
            }, { $out: "listSales" }]).then(sales => {
                data.sales = sales
                Sales.aggregate([{
                    $project: {
                        _id: "$_id",
                        Account1: "AR",
                        Debit: { $sum: [{ $multiply: ["$quantity", "$sellingPrice"] }, { $multiply: ["$quantity", "$sellingPrice", 0.14] }] },
                        account1: "salesRevenue",
                        Credit: { $sum: [{ $multiply: ["$quantity", "$sellingPrice"] }, { $multiply: ["$quantity", "$sellingPrice", 0.14] }] },
                        Account: "COGS",
                        debit: { $multiply: ["$quantity", "$costPrice"] },
                        account: "inventory",
                        credit: { $multiply: ["$quantity", "$costPrice"] }
                    }
                }, { $out: "salestransactions" }]).then(st => {
                    data.st = st;
                    Sales.aggregate([
                        { $match: { clientName: "$clientName" } },
                        {
                            $project: {
                                clientName: "$clientName",
                                totalDebit: { $sum: { $sum: [{ $multiply: ["$quantity", "$sellingPrice"] }, { $multiply: ["$quantity", "$sellingPrice", 0.14] }] } },
                                totalCredit: { $sum: { $sum: [{ $multiply: ["$quantity", "$sellingPrice"] }, { $multiply: ["$quantity", "$sellingPrice", 0.14] }] } }
                            }
                        }, { $out: "suppliers" }
                    ]).then(cli => {
                        data.cli = cli;
                        res.render('index', data, console.log(data))
                    })
                })
            })
        });
        Log.create({
            statement: 'User: ' + req.user.userName + ' added sales invoice with ID ' + req.body._id
        });
    })

    router.get('/transaction', (req, res) => {
        res.render('transaction')
    })
    router.post('/transaction', (req, res) => {
        let data = {};
        var newTransaction = new Transation({
            Account: req.body.Account,
            debit: req.body.debit,
            account: req.body.account,
            credit: req.body.credit
        })
        newTransaction.save(tra => {
            res.render('index', { tra: tra }, console.log(tra))
        })
    })

    router.get('/', (req, res) => {
        Transation.aggregate([
            { $lookup: { from: "salestransactions", localField: "Account", foreignField: "Account1", as: "Account" } },
            { $lookup: { from: "salesTransactions", localField: "account", foreignField: "account1", as: "account" } },
            { $lookup: { from: "salesTransactions", localField: "Account", foreignField: "Account", as: "Account" } },
            { $lookup: { from: "salesTransactions", localField: "account", foreignField: "account1", as: "account" } },
            { $lookup: { from: "salesTransactions", localField: "debit", foreignField: "debit", as: "debit" } },
            { $lookup: { from: "salesTransactions", localField: "credit", foreignField: "credit", as: "credit" } },
            { $lookup: { from: "salesTransactions", localField: "debit", foreignField: "Debit", as: "debit" } },
            { $lookup: { from: "salesTransactions", localField: "credit", foreignField: "Credit", as: "credit" } }

            , { $out: "generalTra" }
        ]).then(tt => {
            res.render('', { tt: tt }, console.log(tt))
        })
    })
}